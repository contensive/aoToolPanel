<?xml version="1.0"?>
<doc>
<assembly>
<name>
CPBase
</name>
</assembly>
<members>
<member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Contensive.BaseClasses.CPBaseClass.BlockNew">
	<summary>
 Factory for new Block object. See CPBlockBaseClass for Block Details
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBaseClass.CSNew">
	<summary>
 Factory for new CS object. See CPCSBaseClass for CS object details 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Version">
	<summary>
 Contensive version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Group">
	<summary>
 The Group Object accesses group features. Group Features generally associate people and roles. See CPGroupBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Request">
	<summary>
 The Request object handles data associated with the request from the visitor. See CPRequestBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Response">
	<summary>
 The Response object handles the stream of data back to the visitor. See CPResponseBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.UserError">
	<summary>
 The UserError Class handles error handling for those conditions you want the user to know about or correct. For example an login error. See the CPUserErrorBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Visit">
	<summary>
 The Visit Class handles details related to the visit. For instance it holds the number of pages hit so far and has methods for adding and modifying user defined visit properties. See CPVisitBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Visitor">
	<summary>
 The Visitor Class handles details related to the visitor. For instance it holds the browser type used by the visitor. See CPVisitorBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.User">
	<summary>
 The User Class handles details related to the user and its related people record. See CPUserBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Html">
	<summary>
 The HTML class handles functions used to read and produce HTML elements. See CPHtmlBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Cache">
	<summary>
 The Cache objects handles caching. Use this class to save blocks of data you will use again. See CPCacheBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Db">
	<summary>
 The Db object handles direct access to the Database. The ContentSet functions in the CPCSBaseClass are prefered for general use. See the CPDBBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Email">
	<summary>
 The Email object handles email functions. See CPEmailBaseClass for more information.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Content">
	<summary>
 The Content class handles functions related to content meta such as determining the table used for a content definition, getting a recordid based on the name, or accessing the methods that control workflow publishing. See CPContentBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Addon">
	<summary>
 The addon class handles access to an add-on's features. Use the Utils object to run an addon. An instance of the Addon class is passed to the executing addon in the MyAddon object so it can access any features needed. See the CPAddonBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Utils">
	<summary>
 The Utils class handles basic utilities and other features not classified. See CPUtilsBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Doc">
	<summary>
 The Doc object handles features related to the document (page) being contructed in the current call. See CPDocBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.Site">
	<summary>
 The Site Class handles features related to the current site. See CPSiteBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.MyAddon">
	<summary>
 The MyAddon object is an instance of the Addon class created before an add-ons execute method is called. See CPAddonBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPBaseClass.File">
	<summary>
 The file object handles file system methods. See CPFileBaseClass for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.CPBaseClass">
	<summary>
 CP - The object passed to an addon in the add-ons execute method. See the AddonBaseClass for details of the addon execute method.
 </summary>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPDocBaseClass.IsAdminSite">
	<summary>
 Returns true if the doc is in the admin site
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.Insert(System.String)">
	<summary>
 Inserts a new content row
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.Int32,System.String,System.Boolean)">
	<summary>
 Opens a record set with the record specified by the recordId
 </summary>
	<param name="contentName"></param>
	<param name="recordId"></param>
	<param name="SelectFieldList"></param>
	<param name="activeOnly"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
	<summary>
 Opens a record set with the records specified by the sqlCriteria
 </summary>
	<param name="ContentName"></param>
	<param name="SQLCriteria"></param>
	<param name="SortFieldList"></param>
	<param name="ActiveOnly"></param>
	<param name="SelectFieldList"></param>
	<param name="PageSize"></param>
	<param name="PageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
	<summary>
 Opens a record set with user records that are in a Group
 </summary>
	<param name="GroupList"></param>
	<param name="SQLCriteria"></param>
	<param name="SortFieldList"></param>
	<param name="ActiveOnly"></param>
	<param name="PageSize"></param>
	<param name="PageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupListUsers(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
	<summary>
 deprecated. Use OpenGroupUsers.
 </summary>
	<param name="GroupList"></param>
	<param name="SQLCriteria"></param>
	<param name="SortFieldList"></param>
	<param name="ActiveOnly"></param>
	<param name="PageSize"></param>
	<param name="PageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL(System.String)">
	<summary>
 Opens a record set based on an sql statement
 </summary>
	<param name="SQL"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 Opens a record set based on an sql statement
 </summary>
	<param name="SQL"></param>
	<param name="DataSourcename"></param>
	<param name="PageSize"></param>
	<param name="PageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL2(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 Opens a record set based on an sql statement, (polymorphism is not supported by active scripting)
 </summary>
	<param name="SQL"></param>
	<param name="DataSourcename"></param>
	<param name="PageSize"></param>
	<param name="PageNumber"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.Close">
	<summary>
  Closes an open record set
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetFormInput(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Returns a form input element based on a content field definition
 </summary>
	<param name="ContentName"></param>
	<param name="FieldName"></param>
	<param name="Height"></param>
	<param name="Width"></param>
	<param name="HtmlId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.Delete">
	<summary>
 Deletes the current row
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.FieldOK(System.String)">
	<summary>
 Returns true if the given field is valid for this record set
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GoFirst">
	<summary>
 Move to the first record in the current record set
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetAddLink(System.String,System.Boolean)">
	<summary>
 Returns an icon linked to the add function in the admin site for this content
 </summary>
	<param name="PresetNameValueList"></param>
	<param name="AllowPaste"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetBoolean(System.String)">
	<summary>
 Returns the field value cast as a boolean
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetDate(System.String)">
	<summary>
 Returns the field value cast as a date
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetEditLink(System.Boolean)">
	<summary>
 Returns an icon linked to the edit function in the admin site for this content
 </summary>
	<param name="AllowCut"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetFilename(System.String,System.String,System.String)">
	<summary>
 Returns the filename for the field, if a filename is related to the field type. Use this call to create the appropriate filename when a new file is added. The filename with the appropriate path is created or returned. This file and path is relative to the site's content file path and does not include a leading slash. To use this file in a URL, prefix with cp.site.filepath.
 </summary>
	<param name="FieldName"></param>
	<param name="OriginalFilename"></param>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetInteger(System.String)">
	<summary>
 Returns the field value cast as an integer
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetNumber(System.String)">
	<summary>
 Returns the field value cast as a number (double)
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetRowCount">
	<summary>
 Returns the number of rows in the result.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetSQL">
	<summary>
 returns the query used to generate the results
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetText(System.String)">
	<summary>
 Returns the result and converts it to a text type. For field types that store text in files, the text is returned instead of the filename. These include textfile, cssfile, javascriptfile. For file types that do not contain text, the filename is returned. These include filetype and imagefiletype.
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetHtml(System.String)">
	<summary>
 Returns the result of getText() after verifying it's content is valid for use in Html content. If the field is a fieldTypeHtml the content is returned without conversion. If the field is any other type, the content is HtmlEncoded first (&gt; converted to &gt;, etc)
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GetTextFile(System.String)">
	<summary>
 Deprecated. Returns the filename for field types that store text in files.
 </summary>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.GoNext">
	<summary>
 Move to the next record in a result set.
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.OK">
	<summary>
 Returns true if there is valid data in the current row of the result set.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.Save">
	<summary>
 Forces a save of any changes made to the current row. A save occurs automatically when the content set is closed or when it moves to another row.
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.SetField(System.String,System.String)">
	<summary>
 Sets a value in a field of the current row.
 </summary>
	<param name="FieldName"></param>
	<param name="FieldValue"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.SetFile(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="FieldName"></param>
	<param name="Copy"></param>
	<param name="ContentName"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCSBaseClass.SetFormInput(System.String,System.String)">
	<summary>
 Processes a value from the incoming request to a field in the current row.
 </summary>
	<param name="FieldName"></param>
	<param name="RequestName"></param>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.CPCSBaseClass">
	<summary>
 CP.CS - The primary interface to the database. This object is similar to a recordset. It includes features of the content meta data. When a record is inserted, the default values of the record are available to read.
 </summary>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPResponseBaseClass.isOpen">
	<summary>
 Is the response object available to write. False during background processes and after the html response has ended. For instance, when a remote method is returned the response is closed meaning no other data should be added to the output.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.AppendVirtual(System.String,System.String)">
	<summary>
 Append content to a text file in the content files. If the file does not exist it will be created.
 </summary>
	<param name="Filename">The filename of the file to be appended. May include subfolders in the content file area. It should not include a leading slash. Folder slashes should be \.</param>
	<param name="FileContent">Test appended to the file</param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.CopyVirtual(System.String,System.String)">
	<summary>
 Copies a file in the content file area to another. If the destination does not exist it is created. Filenames may include subfolders but should not include a leading slash.
 </summary>
	<param name="SourceFilename"></param>
	<param name="DestinationFilename"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.CreateFolder(System.String)">
	<summary>
 Create a folder given a physical folder path.
 </summary>
	<param name="FolderPath"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.Delete(System.String)">
	<summary>
 Delete a file given the complete physical path and filename.
 </summary>
	<param name="Filename"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.DeleteVirtual(System.String)">
	<summary>
 Delete a file in the content file area. The filename may contain subfolders and should not begin with a leading slash.
 </summary>
	<param name="Filename"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.Read(System.String)">
	<summary>
 Read a text file given the complete physical path and filename.
 </summary>
	<param name="Filename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.ReadVirtual(System.String)">
	<summary>
 Read a text file in the content file area. The filename may contain subfolders and should not begin with a leading slash.
 </summary>
	<param name="Filename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.Save(System.String,System.String)">
	<summary>
 Save or create a text file given the complete physical path and filename.
 </summary>
	<param name="Filename"></param>
	<param name="FileContent"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.SaveVirtual(System.String,System.String)">
	<summary>
 Save a text file in the content file area. The filename may contain subfolders and should not begin with a leading slash.
 </summary>
	<param name="Filename"></param>
	<param name="FileContent"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.fileList(System.String,System.Int32,System.Int32)">
	<summary>
 Get a crlf delimited list of files in a given path. Each row is a tab delimited list of attributes for each file. The attributes are:
 FileName
 Attributes
 DateCreated
 DateLastAccessed
 DateLastModified
 Size
 Type
 </summary>
	<param name="folderName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.folderList(System.String)">
	<summary>
 Get a crlf delimited list of folders in a given path. Each row is a tab delimited list of attributes for each folder. The attributes are:
 Name
 Attributes
 DateCreated
 DateLastAccessed
 DateLastModified
 Type
 </summary>
	<param name="folderName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.fileExists(System.String)">
	<summary>
 Returns true if a file exists
 </summary>
	<param name="pathFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPFileBaseClass.folderExists(System.String)">
	<summary>
 Returns true if a folder exists
 </summary>
	<param name="folderName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPEmailBaseClass.fromAddressDefault">
	<summary>
 Returns the site's default email from address
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPEmailBaseClass.send(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Sends an email to an email address.
 </summary>
	<param name="ToAddress"></param>
	<param name="FromAddress"></param>
	<param name="Subject"></param>
	<param name="Body"></param>
	<param name="SendImmediately"></param>
	<param name="BodyIsHTML"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendForm(System.String,System.String,System.String)">
	<summary>
 Sends an email that includes all the form elements in the current webpage response.
 </summary>
	<param name="ToAddress"></param>
	<param name="FromAddress"></param>
	<param name="Subject"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Sends an email to everyone in a group list. The list can be of Group Ids or names. Group names in the list can not contain commas.
 </summary>
	<param name="GroupNameOrIdList"></param>
	<param name="FromAddress"></param>
	<param name="Subject"></param>
	<param name="Body"></param>
	<param name="SendImmediately"></param>
	<param name="BodyIsHTML"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendPassword(System.String)">
	<summary>
 Send a list of usernames and passwords to the account(s) that include the given email address.
 </summary>
	<param name="UserEmailAddress"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.String,System.String,System.Int32)">
	<summary>
 Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id.
 </summary>
	<param name="EmailIdOrName"></param>
	<param name="AdditionalCopy"></param>
	<param name="AdditionalUserID"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Send an email using the values in a user record.
 </summary>
	<param name="ToUserID"></param>
	<param name="FromAddress"></param>
	<param name="Subject"></param>
	<param name="Body"></param>
	<param name="SendImmediately"></param>
	<param name="BodyIsHTML"></param>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.CPDbBaseClass">
	<summary>
 CP.Db - This object references the database directly
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCacheBaseClass.Clear(System.String)">
	<summary>
 clear all cache based on any content in a list provided
 </summary>
	<param name="ContentNameList"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCacheBaseClass.Read(System.String)">
	<summary>
 Read the value of a cache. If the cache is cleared, an empty string is returned.
 </summary>
	<param name="Name"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCacheBaseClass.Save(System.String,System.String,System.String,System.DateTime)">
	<summary>
 Save a string to a name. If a change is made to any of the content is the given list or if the clearbydate is passed, the cache is cleared.
 </summary>
	<param name="Name"></param>
	<param name="Value"></param>
	<param name="ClearOnContentChangeList"></param>
	<param name="ClearOnDate"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPCacheBaseClass.ClearAll">
	<summary>
 Clear all system caches. Use this call to flush all internal caches.
 </summary>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.CPCacheBaseClass">
	<summary>
 CP.Cache - contains features to perform simple caching functions
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.Delete(System.String,System.String)">
	<summary>
 Delete records based from a table based on a content name and SQL criteria.
 </summary>
	<param name="ContentName"></param>
	<param name="SQLCriteria"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetCopy(System.String,System.String)">
	<summary>
 Get the string from the 'Copy Content' record based on it's name. If the record does not exist it is created with the default value provided.
 </summary>
	<param name="CopyName"></param>
	<param name="DefaultContent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetCopy(System.String,System.String,System.Int32)">
	<summary>
 Get the string from the 'Copy Content' record based on it's name. If the record does not exist it is created with the default value provided.
 </summary>
	<param name="CopyName"></param>
	<param name="DefaultContent"></param>
	<param name="personalizationPeopleId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.SetCopy(System.String,System.String)">
	<summary>
 Set a string in a 'Copy Content' record. The record will be created or modified.
 </summary>
	<param name="CopyName"></param>
	<param name="Content"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetAddLink(System.String,System.String,System.Boolean,System.Boolean)">
	<summary>
 Get an icon linked to the administration site which adds a new record to the content.
 </summary>
	<param name="ContentName"></param>
	<param name="PresetNameValueList">A comma delimited list of name=value pairs. Each name is a field name and the value is used to prepopulate the new record.</param>
	<param name="AllowPaste">If true and the content supports cut-paste from the public site, the returned string will include a cut icon.</param>
	<param name="IsEditing">If false, this call returns nothing. Set it true if IsEdiing( contentname ) is true.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetContentControlCriteria(System.String)">
	<summary>
 Returns an SQL compatible where-clause which includes all the contentcontentid values allowed for this content name.
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetFieldProperty(System.String,System.String,System.String)">
	<summary>
 Returns a named field property. Valid values for PropertyName are the field names of the 'Content Fields' content definition, also found as the columns in the ccfields table.
 </summary>
	<param name="ContentName"></param>
	<param name="FieldName"></param>
	<param name="PropertyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetID(System.String)">
	<summary>
 Returns the content id given its name
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetProperty(System.String,System.String)">
	<summary>
 Returns a named content property. Valid values for PropertyName are the field names of the 'Content' content definition, also found as the columns in the ccfields table.
 </summary>
	<param name="ContentName"></param>
	<param name="PropertyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetDataSource(System.String)">
	<summary>
 Returns the datasource name of the content given.
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditLink(System.String,System.String,System.Boolean,System.String,System.Boolean)">
	<summary>
 Get an icon linked to the administration site which edits the referenced record. The record is identified by its ID. The recordname is only used for the display caption.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordID"></param>
	<param name="AllowCut">If true and the content allows cut and paste, and cut icon will be included in the return string.</param>
	<param name="RecordName">Used as a caption for the label</param>
	<param name="IsEditing">If false, this call returns nothing. Set it true if IsEdiing( contentname ) is true.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetLinkAliasByPageID(System.Int32,System.String,System.String)">
	<summary>
 Returns the primary link alias for the record id and querystringsuffix. If no link alias exists, it defaultvalue is returned.
 </summary>
	<param name="PageID"></param>
	<param name="QueryStringSuffix">In the case where an add-on is on the page, there may be many unique documents possible from the one pageid. Each possible variation is determined by values in the querystring added by the addon. These name=value pairs in Querystring format are used to identify additional link aliases.</param>
	<param name="DefaultLink">If no link alias is found, this value is returned.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetPageLink(System.Int32,System.String,System.Boolean)">
	<summary>
 Return the appropriate link for a page.
 </summary>
	<param name="PageID"></param>
	<param name="QueryStringSuffix">If a link alias exists, this is used to lookup the correct alias. See GetLinkAliasByPageID for details. In other cases, this is added to the querystring.</param>
	<param name="AllowLinkAlias"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetRecordID(System.String,System.String)">
	<summary>
 Return a record's ID given it's name. If duplicates exist, the first one ordered by ID is returned.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetRecordName(System.String,System.Int32)">
	<summary>
 Return a records name given it's ID.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetTable(System.String)">
	<summary>
 Get the table used for a content definition.
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetTemplateLink(System.Int32)">
	<summary>
 If a template uses a fixed URL, the returns the link associted with a template. Otherwise it returns a blank string.
 </summary>
	<param name="TemplateID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.IsField(System.String,System.String)">
	<summary>
 Used to test if a field exists in a content definition
 </summary>
	<param name="ContentName"></param>
	<param name="FieldName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.IsLocked(System.String,System.String)">
	<summary>
 Returns true if the record is currently being edited.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.IsChildContent(System.String,System.String)">
	<summary>
 Returns true if the childcontentid is a child of the parentcontentid
 </summary>
	<param name="ChildContentID"></param>
	<param name="ParentContentID"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.IsWorkflow(System.String)">
	<summary>
 Returns true if the content is currently using workflow editing.
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.PublishEdit(System.String,System.Int32)">
	<summary>
 If Workflow editing, the record is published.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordID"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.SubmitEdit(System.String,System.Int32)">
	<summary>
 If workflow editing, the record is submitted for pushlishing
 </summary>
	<param name="ContentName"></param>
	<param name="RecordID"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.AbortEdit(System.String,System.Int32)">
	<summary>
 If workflow editing, edits to the record are aborted and the edit record is returned to the condition of hte live record. This condition is used in the Workflow publishing tool.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordId"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.ApproveEdit(System.String,System.Int32)">
	<summary>
 If workflow editing, the record is marked as approved for publishing. This condition is used in the Workflow publishing tool.
 </summary>
	<param name="ContentName"></param>
	<param name="RecordId"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.getLayout(System.String)">
	<summary>
 Returns the html layout field of a layout record
 </summary>
	<param name="layoutName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.AddRecord(System.Object)">
	<summary>
 Inserts a record and returns the Id for the record
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPContentBaseClass.GetListLink(System.String)">
	<summary>
 Returns a linked icon to the admin list page for the content
 </summary>
	<param name="ContentName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Admin">
	<summary>
 When true, this add-on is displayed on and can be used from the admin navigator.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ArgumentList">
	<summary>
 A crlf delimited list of name=value pairs. These pairs create an options dialog available to administrators in advance edit mode. When the addon is executed, the values selected are available through the cp.doc.var("name") method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.AsAjax">
	<summary>
 When true, this addon returns the javascript code necessary to implement this object as ajax.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.BlockDefaultStyles">
	<summary>
 When true, the system only uses the custom styles field when building the page. This field is not updated with add-on updates.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ccGuid">
	<summary>
 The guid used to uniquely identify the add-on
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.CollectionID">
	<summary>
 The ID local to this site of the collection which installed this addon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Content">
	<summary>
 When true, this addon can be placed in the content of pages.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Copy">
	<summary>
 text copy is added to the addon content during execution.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 Addon content is assembled in the following order: TextContent + HTMLContent + IncludeContent + ScriptCallbackContent + FormContent + RemoteAssetContent + ScriptContent + ObjectContent + AssemblyContent.
 </remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.CopyText">
	<summary>
 text copy is added to the addon content during execution.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 Addon content is assembled in the following order: TextContent + HTMLContent + IncludeContent + ScriptCallbackContent + FormContent + RemoteAssetContent + ScriptContent + ObjectContent + AssemblyContent.
 </remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.CustomStyles">
	<summary>
 Styles that are rendered on the page when the addon is executed. Custom styles are editable and are not modified when the add-on is updated.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.DefaultStyles">
	<summary>
 Styles that are included with the add-on and are updated when the add-on is updated. See BlockdefaultStyles to block these.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Description">
	<summary>
 The add-on description is displayed in the addon manager
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.DotNetClass">
	<summary>
 When present, the system calls the execute method of an objected created from this dot net class namespace.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 Addon content is assembled in the following order: TextContent + HTMLContent + IncludeContent + ScriptCallbackContent + FormContent + RemoteAssetContent + ScriptContent + ObjectContent + AssemblyContent.
 </remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.FormXML">
	<summary>
 This is an xml stucture that the system executes to create an admin form. See the support.contensive.com site for more details.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Help">
	<summary>
 This copy is displayed when the help icon for this addon is clicked.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.HelpLink">
	<summary>
 If present, this link is displayed when the addon icon is clicked.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconFilename">
	<summary>
 When present, this icon will be used when the add-on is displayed in the addon manager and when edited. The height, width and sprites must also be set.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconHeight">
	<summary>
 The height in pixels of the icon referenced by the iconfilename.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconSprites">
	<summary>
 The number of images in the icon. There can be multiple images stacked top-to-bottom in the file. The first is the normal image. the second is the hover-over image. The third is the clicked image.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconWidth">
	<summary>
 The width of the icon referenced by the iconfilename
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ID">
	<summary>
 The local ID of this addon on this site.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.InFrame">
	<summary>
 When true, this addon will be displayed in an html iframe.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.IsInline">
	<summary>
 When true, the system will assume the addon returns html that is inline, as opposed to block. This is used to vary the edit icon behaviour.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.JavaScriptBodyEnd">
	<summary>
 Javascript code that will be placed in the document right before the end-body tag. Do not include script tags.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.JavascriptInHead">
	<summary>
 Javascript code that will be placed in the head of the document. Do no include script tags.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.JavaScriptOnLoad">
	<summary>
 Javascript that will be executed in the documents onload event.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Link">
	<summary>
 A URL to a webserver that returns javascript. This URL will be added as the src attribute of a script tag, and placed in the content where this Add-on is inserted. This URL can be to any server-side program on any server, provided it returns javascript.
 For instance, if you have a script page that returns javascript,put the URL of that page here. The addon can be dropped on any page and will execute the script. Your script can be from any site. This technique is used in widgets and avoids the security issues with ajaxing from another site.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.MetaDescription">
	<summary>
 Text here will be added to the meta description section of the document head.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.MetaKeywordList">
	<summary>
 This is a comma or crlf delimited list of phrases that will be added to the document's meta keyword list
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Name">
	<summary>
 The name of the addon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.NavIconType">
	<summary>
 The type of navigator entry to be made. Choices are: Add-on,Report,Setting,Tool
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ObjectProgramID">
	<summary>
 If present, this string will be used as an activex programid to create an object and call it's execute method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnBodyEnd">
	<summary>
 If true, this addon will be execute at the end of every page and its content added to right before the end-body tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnBodyStart">
	<summary>
 If true, this addon will be execute at the start of every page and it's content added to right after the body tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnContentEnd">
	<summary>
 if true, this add-on will be executed on every page and its content added right after the content box.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnContentStart">
	<summary>
 If true, this add-on will be executed on every page and its content added right before the content box
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPAddonBaseClass.Open(System.Int32)">
	<summary>
 Open an add-on with it's local id before accessing its properties
 </summary>
	<param name="AddonId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPAddonBaseClass.Open(System.String)">
	<summary>
 open an add-on with its name or guid before accessing its properties
 </summary>
	<param name="AddonNameOrGuid"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.OtherHeadTags">
	<summary>
 All content in the field will be added directly, as-is to the document head.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.PageTitle">
	<summary>
 All content in the field will be added to the documents title tag
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ProcessInterval">
	<summary>
 When present, this add-on will be executed stand-alone without a webpage periodically at this interval (in minutes).
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ProcessNextRun">
	<summary>
 The next time this add-on is scheduled to run as a processs
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ProcessRunOnce">
	<summary>
 Check true, this addon will be run once within the next minute as a stand-alone process.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.RemoteAssetLink">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.RemoteMethod">
	<summary>
 if true, this add-on can be executed as a remote method. The name of the addon is used as the url.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.RobotsTxt">
	<summary>
 When present, this text will be added to the robots.txt content for the site. This content is editable through the preferences page
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ScriptCode">
	<summary>
 When present, the first routine of this script will be executed when the add-on is executed and its return added to the add-ons return
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ScriptEntryPoint">
	<summary>
 if the ScriptCode has more than one routine and you want to run one other than the first, list is here.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.ScriptLanguage">
	<summary>
 The script language selected for this script.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.SharedStyles">
	<summary>
 A comma delimited list of the local id values of shared style record that will display with this add-on
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Contensive.BaseClasses.CPAddonBaseClass.Template">
	<summary>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.CPAddonBaseClass">
	<summary>
 CP.Addon - The Addon class represents the instance of an add-on. To use this class, use its constructor and open an addon. 
 Use these properties to retrieve it's configuration
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.Load(System.String)">
	<summary>
 Load the block with an html string
 </summary>
	<param name="htmlString"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.OpenFile(System.String)">
	<summary>
 load the block with the entire contents of a file in the wwwRoot
 </summary>
	<param name="wwwFileName"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.OpenCopy(System.String)">
	<summary>
 load the block with the contents of a record in Copy Content
 </summary>
	<param name="copyRecordName"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.OpenLayout(System.String)">
	<summary>
 load the block with the contents of a record in Layouts
 </summary>
	<param name="layoutRecordName"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.ImportFile(System.String)">
	<summary>
 load the block with the body of a file in the wwwRoot
 </summary>
	<param name="wwwFileName"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.SetInner(System.String,System.String)">
	<summary>
 set the innerHtml of an element in the current block specified by the findSelector
 </summary>
	<param name="findSelector"></param>
	<param name="htmlString"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.GetInner(System.String)">
	<summary>
 Return the innerHtml from the current block specified by the findSelector
 </summary>
	<param name="findSelector"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.SetOuter(System.String,System.String)">
	<summary>
 Set the OuterHtml in the current block specified by the findSelector to the htmlString
 </summary>
	<param name="findSelector"></param>
	<param name="htmlString"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.GetOuter(System.String)">
	<summary>
 return the outer Html specified by the findSelector
 </summary>
	<param name="findSelector"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.Append(System.String)">
	<summary>
 append the htmlString into the current Block
 </summary>
	<param name="htmlString"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.Prepend(System.String)">
	<summary>
 Prepend the htmlString on the current block
 </summary>
	<param name="htmlString"></param>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.GetHtml">
	<summary>
 return the entire html of the current block
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.CPBlockBaseClass.Clear">
	<summary>
  Clear the contents of the current block
 </summary>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.CPBlockBaseClass">
	<summary>
 CP.Block - an object that holds and manipulates a block of html
 </summary>
	<remarks></remarks>
</member><member name="M:Contensive.BaseClasses.AddonBaseClass.Execute(Contensive.BaseClasses.CPBaseClass)">
	<summary>
 The only method of an addon. Performs the functions for this part of the the add-on and returns a string. For add-ons executing on a web page or as a remove method, the returned string is added to the page where the addon is placed. For addons run as processes, the returned string is logged in the process log.
 </summary>
	<param name="CP">An instance of the CPBaseClass with a valid CP.MyAddon object pointing to the current addon parameters (values for this addon in the database)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Contensive.BaseClasses.AddonBaseClass">
	<summary>
 The base class for all Contensive add-ons.
 </summary>
	<remarks>
 This is a sample addon created from the AddonBaseClass. To use this add-on, Start a new project and reference CPBase in your Contensive installation.
 Paste this code into a HelloWorld Class and build the DLL.
 Copy the DLL into the Contensive\Addon folder.
 Create a new collection on your site and name it Samples. (Manage Add-ons &gt;&gt; Advanced &gt;&gt; click on collections )
 Create a new Addon on your site, name it Hello World, set the Samples collection and set the Dot Net Class name to Contensive.Addons.HelloWorldClass
 Open the Navigator to Manage Add-ons &gt;&gt; Samples &gt;&gt; and click on Hello World
 
<code>
 Namespace Contensive.Addons
 '
 'Hello World
 '
 Public Class HelloWorldClass
     Inherits BaseClasses.AddonBaseClass
     Public Overrides Function Execute(ByVal CP As Contensive.BaseClasses.CPBaseClass) As Object
         Return "Hello World 2"
     End Function
End Class
End Namespace
  </code>
	</remarks>
</member>
</members>
</doc>